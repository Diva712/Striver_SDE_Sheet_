#include <bits/stdc++.h>


void dfs2 (int node , vector<int>adjR[] , vector<int>&vis , vector<int>&vec){
    vis[node]=1;
    vec.push_back(node);
    for(auto it: adjR[node]){
        if(!vis[it]){
            dfs2(it , adjR , vis , vec);
        }
    }
}
void dfs (int node , stack<int>&st , vector<int>&vis , vector<int>adj[]){
    vis[node] = 1;
    for(auto it : adj[node]){
        if(!vis[it]){
            dfs(it , st, vis, adj);
        }
    }
    st.push(node);
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    // Write your code here.
    vector<int>adj[n],adjR[n];
    for(auto it: edges){
        adj[it[0]].push_back(it[1]);
    }

    stack<int>st;
    vector<int>vis(n,0);
    for(int i=0; i<n; i++){
        if(!vis[i]){
            dfs(i,st,vis,adj);
        }
    }

    for(int i=0; i<n; i++){
        vis[i]=0;
        for(auto it : adj[i]){
            adjR[it].push_back(i);
        }
    }

    vector<vector<int>>ans;
    while(!st.empty()){
        int node = st.top();
        st.pop();
        vector<int>vec;
        if(!vis[node]){
            dfs2(node , adjR , vis , vec);
        }
        ans.push_back(vec);
    }
    return ans;
}
