#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
bool isLeaf(TreeNode<int>*root){
   return (root->left==NULL && root->right==NULL);
}
void addLeft (TreeNode<int>*root , vector<int>&res){
    TreeNode<int>* node = root->left;
    while(node){
        if(!isLeaf(node)){
            res.push_back(node->data);
        }
        if(node->left){
            node = node->left;
        }
        else{
            node= node->right;
        }
    }

}
void addLeaf(TreeNode<int>*root , vector<int>&res){
    if(isLeaf(root)){
        res.push_back(root->data);
        return ;
    }
    if(root->left)
        addLeaf(root->left , res);
    if(root->right)
        addLeaf(root->right , res);
}

void addRight(TreeNode<int>*root , vector<int>&res){
    vector<int>temp;
    TreeNode<int>*curr = root->right;
    while(curr){
        if(!isLeaf(curr)){
            temp.push_back(curr->data);
        }
        if(curr->right){
            curr = curr->right;
        }
        else{
            curr = curr->left;
        }
    }
    for(int i=temp.size()-1 ; i>=0 ;i--){
        res.push_back(temp[i]);
    }
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int>res;
    if(root==NULL){
        return res;
    }
    if(!isLeaf(root))
    res.push_back(root->data);
    addLeft(root , res);
    addLeaf(root , res);
    addRight(root , res);
    return res;
}
