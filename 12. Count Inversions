#include <bits/stdc++.h> 
    long long Merge(long long *arr , int low , int mid , int high){
        int left = low;
        int right = mid+1; 
        long long cnt = 0;
        vector<long long>temp;
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right] ) {
                temp.push_back(arr[left]);
                left++;
            }
            else {
                temp.push_back(arr[right]);
                cnt += (mid - left + 1);
                right++;
            }
        }
    
        while (left <= mid) {
            temp.push_back(arr[left]);
            left++;
        }
    
        while (right <= high) {
            temp.push_back(arr[right]);
            right++;   
        }
    
        // copy to the original array
        for (int i=low; i<= high; i++) {
            arr[i] = temp[i - low];
        };
        
        return cnt;
    }
    long long MergeSort(long long *arr , int low , int high){
        if(low>=high){
            return 0;
        }
        long long int cnt = 0;
        int mid = low + ((high - low)>>1);
        cnt += MergeSort(arr , low , mid);
        cnt += MergeSort(arr , mid+1 , high);
        cnt += Merge(arr , low , mid , high);
        return cnt;
    }
long long getInversions(long long *arr, int n){
    // Write your code here.
    return MergeSort(arr , 0 , n-1);
}
