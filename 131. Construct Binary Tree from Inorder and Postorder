#include<bits/stdc++.h>
/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/
TreeNode<int>* build(vector<int>&inorder , int in_start , int in_end , vector<int>&preorder , int pre_start , int pre_end , map<int,int>&mpp){
     if(in_start>in_end || pre_start > pre_end){
          return NULL;
     } 

     TreeNode<int>* root = new TreeNode<int>(preorder[pre_end]);
     int in_root = mpp[root->data];
     int diff = in_root - in_start;

     root->left = build(inorder , in_start , in_root-1 , preorder , pre_start , pre_start + diff -1 , mpp);
     root->right = build(inorder , in_root+1 , in_end , preorder , pre_start+diff , pre_end-1 , mpp);

     return root;
}
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
	// Write your code here.
     map<int,int>mpp;
     for(int i=0; i<inOrder.size() ; i++){
          mpp[inOrder[i]] = i;
     }
     TreeNode<int>*root = build(inOrder , 0 , inOrder.size()-1 , postOrder , 0 , postOrder.size()-1 , mpp);
     return root;
}
